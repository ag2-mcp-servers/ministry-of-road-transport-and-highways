# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:24:50+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    AcademicCertificateSchema,
    DrivingLicenseSchema,
    DrvlcCertificatePostRequest,
    DrvlcCertificatePostResponse,
    DrvlcCertificatePostResponse1,
    DrvlcCertificatePostResponse2,
    DrvlcCertificatePostResponse3,
    DrvlcCertificatePostResponse4,
    DrvlcCertificatePostResponse5,
    DrvlcCertificatePostResponse6,
    FitcerCertificatePostRequest,
    FitcerCertificatePostResponse,
    FitcerCertificatePostResponse1,
    FitcerCertificatePostResponse2,
    FitcerCertificatePostResponse3,
    FitcerCertificatePostResponse4,
    FitcerCertificatePostResponse5,
    FitcerCertificatePostResponse6,
    RvcerCertificatePostRequest,
    RvcerCertificatePostResponse,
    RvcerCertificatePostResponse1,
    RvcerCertificatePostResponse2,
    RvcerCertificatePostResponse3,
    RvcerCertificatePostResponse4,
    RvcerCertificatePostResponse5,
    RvcerCertificatePostResponse6,
    VehicleRegistrationSchema,
    VhinscCertificatePostRequest,
    VhinscCertificatePostResponse,
    VhinscCertificatePostResponse1,
    VhinscCertificatePostResponse2,
    VhinscCertificatePostResponse3,
    VhinscCertificatePostResponse4,
    VhinscCertificatePostResponse5,
    VhinscCertificatePostResponse6,
    VhtaxCertificatePostRequest,
    VhtaxCertificatePostResponse,
    VhtaxCertificatePostResponse1,
    VhtaxCertificatePostResponse2,
    VhtaxCertificatePostResponse3,
    VhtaxCertificatePostResponse4,
    VhtaxCertificatePostResponse5,
    VhtaxCertificatePostResponse6,
)

app = MCPProxy(
    description="Driving License (DL) & Vehicle Registration Certificate (RC) as available in Ministry of Transport's SARATHI & VAHAN portals (http://morth.nic.in/) can be pulled by citizens into their DigiLocker accounts.",
    termsOfService='https://apisetu.gov.in/terms.php',
    title='Ministry of Road Transport and Highways',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/transport/v3'}],
)


@app.post(
    '/drvlc/certificate',
    description=""" API to verify Driving License. """,
    tags=['vehicle_certification_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def drvlc(body: DrvlcCertificatePostRequest = None):
    """
    Driving License
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/fitcer/certificate',
    description=""" API to verify Fitness Certificate. """,
    tags=['vehicle_certification_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def fitcer(body: FitcerCertificatePostRequest = None):
    """
    Fitness Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/rvcer/certificate',
    description=""" API to verify Registration of Vehicles. """,
    tags=['vehicle_certification_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def rvcer(body: RvcerCertificatePostRequest = None):
    """
    Registration of Vehicles
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/vhinsc/certificate',
    description=""" API to verify Vehicle Insurance Certificate. """,
    tags=['vehicle_certification_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def vhinsc(body: VhinscCertificatePostRequest = None):
    """
    Vehicle Insurance Certificate
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/vhtax/certificate',
    description=""" API to verify Vehicle Tax Receipt. """,
    tags=['vehicle_certification_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def vhtax(body: VhtaxCertificatePostRequest = None):
    """
    Vehicle Tax Receipt
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
